name: check

on:
  pull_request:
  push:
    branches:
      - main

jobs:
  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        id: setup-python
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            venv
          key: >-
            pip+venv
            ${{ steps.setup-python.outputs.python-version }}
            ${{ hashFiles(
                'requirements-dev.txt', 'requirements-test.txt', 'setup.cfg'
            ) }}
      - uses: actions/cache@v3
        with:
          path: ~/.cache/pre-commit
          key: >-
            pre-commit
            ${{ hashFiles('.pre-commit-config.yaml') }}
      - name: Install dependencies
        run: |
          set -euxo pipefail
          python3 -m venv venv
          source venv/bin/activate
          python3 -m pip install -Ur requirements-dev.txt pre-commit~=2.9
          pre-commit install-hooks
      - name: Run pre-commit
        run: |
          set -euxo pipefail
          source venv/bin/activate

          # Commit message checks

          tmpdir=$(mktemp -d)
          trap "rm -r '$tmpdir'" EXIT
          commits_json=$tmpdir/commits.json
          commit_txt=$tmpdir/message.txt

          # For push, commits are available directly in github.event.commits.
          # For pull_request they're not: grab them from API, transform fields
          # we want to a similar structure as pushes are.
          # Note: API does not work for private projects, gives 404.
          if [[ "${{ github.event.commits }}" ]]; then
            cat <<\EOF >"$commits_json"
            ${{ toJSON(github.event.commits) }}
          EOF
          else
            curl -fSsL ${{ github.event.pull_request.commits_url }} | \
              jq '[.[] | {id: .sha, message: .commit.message}]' >"$commits_json"
          fi

          rc=0
          for id in $(jq --raw-output '.[].id' <"$commits_json"); do
            jq --raw-output ".[] | select(.id==\"$id\") | .message" \
              <"$commits_json" >"$commit_txt"
            echo "Commit $id:"
            pre-commit run gitlint \
              --color always \
              --hook-stage commit-msg \
              --commit-msg-filename "$commit_txt" \
              || rc=1
          done

          # Other pre-commit checks

          pre-commit run --color always --all-files || rc=1

          exit $rc

  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - ubuntu-latest
        python-version:
          - "3.8"
          - "3.9"
          - "3.10"
          - "3.11.0-alpha - 3.11"
          - "pypy-3.9"
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            .tox
          key: >-
            ${{ runner.os }} pip ${{ matrix.python-version }}
            ${{ hashFiles('requirements-test.txt', 'setup.cfg') }}
      - name: Install dependencies
        run: |
          python3 -m pip install tox-gh-actions
      - name: Run tests
        run: |
          tox --skip-missing-interpreters false
        env:
          PYTEST_ADDOPTS: --vcr-record=none --color=yes
          TOX_TESTENV_PASSENV: PYTEST_ADDOPTS
