name: check

on:
  pull_request:
  push:
    branches:
      - main

jobs:

  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        id: setup-python
        # use Python version matching pytype's python_version for simplicity
        with:
          python-version: 3.8
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cache/pip
            venv
          key: >-
            pip+venv
            ${{steps.setup-python.outputs.python-version}}
            ${{hashFiles(
                'requirements-dev.txt', 'requirements-test.txt', 'setup.cfg'
            )}}
      - uses: actions/cache@v2
        with:
          path: ~/.cache/pre-commit
          key: >-
            pre-commit
            ${{hashFiles('.pre-commit-config.yaml')}}
      - name: Install dependencies
        run: |
          set -euxo pipefail
          python3 -m venv venv
          source venv/bin/activate
          python3 -m pip install -Ur requirements-dev.txt
          pre-commit install-hooks
      - name: Run pre-commit
        run: |
          set -euxo pipefail
          source venv/bin/activate

          # Commit message checks

          tmpdir=$(mktemp -d)
          trap "rm -r '$tmpdir'" EXIT
          commits_json=$tmpdir/commits.json
          commit_txt=$tmpdir/message.txt

          # For push, commits are available directly in github.event.commits.
          # For pull_request they're not: grab them from API, transform fields
          # we want to a similar structure as pushes are.
          if [[ "${{github.event.commits}}" ]]; then
            cat <<\EOF >"$commits_json"
            ${{toJSON(github.event.commits)}}
          EOF
          else
            curl -fSsL ${{github.event.pull_request.commits_url}} | \
              jq '[.[] | {id: .sha, message: .commit.message}]' >"$commits_json"
          fi

          # user.* for gitlint
          git config user.name $(git log -1 --format=format:%an)
          git config user.email $(git log -1 --format=format:%ae)

          rc=0
          for id in $(jq --raw-output '.[].id' <"$commits_json"); do
            jq --raw-output ".[] | select(.id==\"$id\") | .message" \
              <"$commits_json" >"$commit_txt"
            echo "Linting commit $id message..."
            set +e
            pre-commit run gitlint \
              --color=always \
              --hook-stage=commit-msg \
              --commit-msg-filename="$commit_txt"
            ((rc+=$?))
            set -e
          done

          # Other pre-commit checks

          set +e
          pre-commit run --color=always --all-files
          ((rc+=$?))
          set -e

          exit $rc

  test:
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os:
          - ubuntu-latest
        python-version:
          - "3.8"
          - "3.9"
          - "3.10"
          - "3.11.0-alpha - 3.11"
          - "pypy-3.8"
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{matrix.python-version}}
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cache/pip
            .tox
          key: >-
            ${{runner.os}} pip ${{matrix.python-version}}
            ${{hashFiles('requirements-test.txt', 'setup.cfg')}}
      - name: Install dependencies
        run: |
          python3 -m pip install tox-gh-actions
      - name: Run tests
        run: |
          tox --skip-missing-interpreters false
        env:
          PYTEST_ADDOPTS: --color=yes
          TOX_TESTENV_PASSENV: PYTEST_ADDOPTS
